import 'package:flutter/material.dart';
import 'package:dio/dio.dart';

class PickSeatScreen extends StatefulWidget {
  final String cinemaName;
  final String roomId;
  final String roomName;
  final String dateTime;
  final String movieTitle;
  final double ticketPrice;

  const PickSeatScreen({
    super.key,
    required this.cinemaName,
    required this.roomId,
    required this.roomName,
    required this.dateTime,
    required this.movieTitle,
    required this.ticketPrice,
  });

  @override
  _PickSeatScreenState createState() => _PickSeatScreenState();
}

class _PickSeatScreenState extends State<PickSeatScreen> {
  final Dio _dio = Dio();
  final int rows = 8;
  final int cols = 15;
  List<String> bookedSeats = []; // Gh·∫ø ƒë√£ ƒë·∫∑t t·ª´ API
  List<String> selectedSeats = []; // Gh·∫ø ƒëang ch·ªçn
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _fetchBookedSeats(); // L·∫•y danh s√°ch gh·∫ø ƒë√£ ƒë·∫∑t t·ª´ API
  }

  /// **üìå L·∫•y danh s√°ch gh·∫ø ƒë√£ ƒë·∫∑t t·ª´ API**
  Future<void> _fetchBookedSeats() async {
    try {
      final response = await _dio.get('https://api.example.com/seats?roomId=${widget.roomId}');
      setState(() {
        bookedSeats = List<String>.from(response.data['bookedSeats']);
        isLoading = false;
      });
    } catch (error) {
      print("L·ªói khi l·∫•y danh s√°ch gh·∫ø: $error");
      setState(() => isLoading = false);
    }
  }

  /// **üìå ƒê·∫∑t v√©: G·ª≠i danh s√°ch gh·∫ø ƒë√£ ch·ªçn l√™n API**
  Future<void> _bookTickets() async {
    if (selectedSeats.isEmpty) return;
    try {
      final response = await _dio.post(
        'https://api.example.com/bookings',
        data: {
          "roomId": widget.roomId,
          "seats": selectedSeats,
        },
      );
      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("ƒê·∫∑t v√© th√†nh c√¥ng: ${selectedSeats.join(", ")}")),
        );
        setState(() {
          bookedSeats.addAll(selectedSeats);
          selectedSeats.clear();
        });
      }
    } catch (error) {
      print("L·ªói khi ƒë·∫∑t v√©: $error");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("ƒê·∫∑t v√© th·∫•t b·∫°i!")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(widget.cinemaName, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            Text('${widget.roomName} - ${widget.dateTime}', style: const TextStyle(fontSize: 14)),
          ],
        ),
        backgroundColor: Colors.black,
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                const SizedBox(height: 20),
                _buildSeatLegend(),
                const SizedBox(height: 10),
                _buildSeatMap(),
              ],
            ),
      bottomNavigationBar: _buildBottomNavBar(),
    );
  }

  /// **üìå Ch√∫ th√≠ch t√¨nh tr·∫°ng gh·∫ø**
  Widget _buildSeatLegend() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _buildLegendItem(Colors.green, "Gh·∫ø tr·ªëng"),
          _buildLegendItem(Colors.grey, "Gh·∫ø ƒë√£ ƒë·∫∑t"),
          _buildLegendItem(Colors.orange, "Gh·∫ø ƒëang ch·ªçn"),
        ],
      ),
    );
  }

  Widget _buildLegendItem(Color color, String label) {
    return Row(
      children: [
        Container(width: 20, height: 20, color: color),
        const SizedBox(width: 5),
        Text(label),
      ],
    );
  }

  /// **üìå S∆° ƒë·ªì ch·ªó ng·ªìi**
  Widget _buildSeatMap() {
    return Expanded(
      child: GridView.builder(
        padding: const EdgeInsets.symmetric(horizontal: 20),
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 15,
          crossAxisSpacing: 4,
          mainAxisSpacing: 4,
          childAspectRatio: 1,
        ),
        itemCount: rows * cols,
        itemBuilder: (context, index) {
          int row = index ~/ cols;
          int col = index % cols;
          String seatLabel = '${String.fromCharCode(65 + row)}${col + 1}';

          bool isBooked = bookedSeats.contains(seatLabel);
          bool isSelected = selectedSeats.contains(seatLabel);

          return GestureDetector(
            onTap: isBooked ? null : () => _toggleSeatSelection(seatLabel),
            child: Container(
              alignment: Alignment.center,
              decoration: BoxDecoration(
                color: isBooked
                    ? Colors.grey
                    : isSelected
                        ? Colors.orange
                        : Colors.green,
                borderRadius: BorderRadius.circular(4),
              ),
              child: Text(
                seatLabel,
                style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
              ),
            ),
          );
        },
      ),
    );
  }

  /// **üìå Ch·ªçn/b·ªè ch·ªçn gh·∫ø**
  void _toggleSeatSelection(String seatLabel) {
    setState(() {
      if (selectedSeats.contains(seatLabel)) {
        selectedSeats.remove(seatLabel);
      } else {
        selectedSeats.add(seatLabel);
      }
    });
  }

  /// **üìå Bottom Navigation Bar**
  Widget _buildBottomNavBar() {
    double totalPrice = selectedSeats.length * widget.ticketPrice;

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),
      decoration: const BoxDecoration(
        color: Colors.black,
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(widget.movieTitle, style: const TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.bold)),
              Text(
                "T·ªïng: ${totalPrice.toStringAsFixed(0)}ƒë",
                style: const TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.bold),
              ),
            ],
          ),
          const SizedBox(height: 10),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text("Gh·∫ø ƒë√£ ch·ªçn: ${selectedSeats.join(", ")}", style: const TextStyle(color: Colors.white, fontSize: 14)),
              ElevatedButton(
                onPressed: selectedSeats.isEmpty ? null : _bookTickets,
                style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                child: const Text("ƒê·∫∑t v√©", style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
