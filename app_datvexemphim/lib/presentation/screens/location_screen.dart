import 'package:app_datvexemphim/presentation/screens/pickmovieandtime_screen.dart';
import 'package:dropdown_button2/dropdown_button2.dart';
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:app_datvexemphim/api/api_service.dart';
import 'package:geolocator/geolocator.dart';
import 'package:icons_plus/icons_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import 'dart:math';

class LocationScreen extends StatefulWidget {
  const LocationScreen({super.key});

  @override
  _LocationScreenState createState() => _LocationScreenState();
}

class _LocationScreenState extends State<LocationScreen> {
  List<dynamic> cinemas = []; // Danh s√°ch r·∫°p
  List<dynamic> filteredCinemas = []; // Danh s√°ch r·∫°p ƒë√£ l·ªçc
  List<String> provinces = []; // Danh s√°ch t·ªânh/th√†nh
  String? selectedProvince; // T·ªânh/th√†nh ƒë∆∞·ª£c ch·ªçn
  bool isLoading = true;
  bool isLocationLoading = false; // Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i l·∫•y v·ªã tr√≠
  bool isShowingNearest =
      false; // Bi·∫øn ƒë·ªÉ ki·ªÉm tra xem ƒëang hi·ªÉn th·ªã r·∫°p g·∫ßn nh·∫•t hay kh√¥ng

  @override
  void initState() {
    super.initState();
    fetchProvinces();
    fetchCinemas();
  }

  // G·ªçi API l·∫•y danh s√°ch t·ªânh/th√†nh t·ª´ ngu·ªìn c√¥ng khai
  Future<void> fetchProvinces() async {
    try {
      Response response =
          await Dio().get("https://provinces.open-api.vn/api/?depth=1");
      if (response.statusCode == 200) {
        setState(() {
          provinces =
              response.data.map<String>((p) => p["name"].toString()).toList();
        });
      }
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y danh s√°ch t·ªânh/th√†nh: $e");
    }
  }

  // G·ªçi API l·∫•y danh s√°ch r·∫°p t·ª´ backend
  Future<void> fetchCinemas() async {
    Response? response = await ApiService.get("/rapphims");
    if (response != null && response.statusCode == 200) {
      setState(() {
        cinemas = response.data;
        filteredCinemas = cinemas; // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã t·∫•t c·∫£ r·∫°p
        isLoading = false;
      });
    }
  }

  // T√≠nh kho·∫£ng c√°ch gi·ªØa hai ƒëi·ªÉm
  double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
    const double earthRadius = 6371; // B√°n k√≠nh tr√°i ƒë·∫•t t√≠nh b·∫±ng km
    double dLat = _degreesToRadians(lat2 - lat1);
    double dLon = _degreesToRadians(lon2 - lon1);
    double a = sin(dLat / 2) * sin(dLat / 2) +
        cos(_degreesToRadians(lat1)) *
            cos(_degreesToRadians(lat2)) *
            sin(dLon / 2) *
            sin(dLon / 2);
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
    return earthRadius * c; // Kho·∫£ng c√°ch t√≠nh b·∫±ng km
  }

  double _degreesToRadians(double degrees) {
    return degrees * pi / 180;
  }

  // T√¨m ki·∫øm 5 r·∫°p g·∫ßn nh·∫•t
  void findNearestCinemas(double userLat, double userLon) {
    List<dynamic> nearestCinemas = [];
    for (var cinema in cinemas) {
      double? lat = cinema["geo_lat"];
      double? lon = cinema["geo_long"];

      // Ki·ªÉm tra xem lat v√† lon c√≥ ph·∫£i l√† null kh√¥ng
      if (lat != null && lon != null) {
        double distance = calculateDistance(
          userLat,
          userLon,
          lat,
          lon,
        );
        nearestCinemas.add({"cinema": cinema, "distance": distance});
      }
    }
    nearestCinemas.sort((a, b) => a["distance"].compareTo(b["distance"]));
    setState(() {
      filteredCinemas = nearestCinemas.take(5).map((e) => e["cinema"]).toList();
      isShowingNearest = true;
      selectedProvince = null; // Reset t·ªânh/th√†nh ƒë∆∞·ª£c ch·ªçn
    });

    // In ra th√¥ng b√°o v·ªÅ 5 r·∫°p g·∫ßn nh·∫•t
    print("üìç V·ªã tr√≠ hi·ªán t·∫°i: ($userLat, $userLon)");
    print("üé¨ 5 r·∫°p g·∫ßn nh·∫•t:");
    for (var cinema in filteredCinemas) {
      print("- ${cinema['ten_rap']} t·∫°i ${cinema['dia_chi']}");
    }
  }

  // L·ªçc r·∫°p theo t·ªânh/th√†nh ƒë∆∞·ª£c ch·ªçn
  void filterCinemas(String province) {
    setState(() {
      selectedProvince = province;
      filteredCinemas = cinemas.where((cinema) {
        String diaChi = cinema["dia_chi"] ?? ""; // Ki·ªÉm tra null
        return diaChi.contains(province);
      }).toList();
    });
  }

  // Hi·ªÉn th·ªã t·∫•t c·∫£ r·∫°p
  void showAllCinemas() {
    setState(() {
      filteredCinemas = cinemas;
      isShowingNearest = false;
      selectedProvince = null; // Reset t·ªânh/th√†nh ƒë∆∞·ª£c ch·ªçn
    });
  }

  // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
  Future<void> _getCurrentLocation() async {
    setState(() {
      isLocationLoading = true; // B·∫Øt ƒë·∫ßu qu√° tr√¨nh l·∫•y v·ªã tr√≠
    });

    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
    }

    if (permission == LocationPermission.deniedForever) {
      // N·∫øu quy·ªÅn b·ªã t·ª´ ch·ªëi vƒ©nh vi·ªÖn, hi·ªÉn th·ªã th√¥ng b√°o
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Vui l√≤ng c·∫•p quy·ªÅn v·ªã tr√≠")),
      );
      setState(() {
        isLocationLoading = false; // K·∫øt th√∫c qu√° tr√¨nh l·∫•y v·ªã tr√≠
      });
      return;
    }

    Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high);
    findNearestCinemas(position.latitude, position.longitude);

    // In ra th√¥ng b√°o ƒë√£ l·∫•y ƒë∆∞·ª£c v·ªã tr√≠
    print(
        "‚úÖ ƒê√£ l·∫•y v·ªã tr√≠ hi·ªán t·∫°i: (${position.latitude}, ${position.longitude})");

    setState(() {
      isLocationLoading = false; // K·∫øt th√∫c qu√° tr√¨nh l·∫•y v·ªã tr√≠
    });
  }

  // M·ªü Google Maps ch·ªâ ƒë∆∞·ªùng ƒë·∫øn r·∫°p
  void _openMaps(double lat, double lon) async {
    final url = 'https://www.google.com/maps/dir/?api=1&destination=$lat,$lon';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch $url';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xfff9f9f9),
      appBar: AppBar(
        title: const Text('Danh S√°ch R·∫°p',
            style: TextStyle(fontWeight: FontWeight.bold)),
        backgroundColor: const Color(0xfff9f9f9),
        centerTitle: true,
        elevation: 0,
      ),
      body: isLoading
          ? const Center(
              child: CircularProgressIndicator()) // Hi·ªÉn th·ªã v√≤ng xoay khi t·∫£i
          : Column(
              children: [
                Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    children: [
                      // H√†ng ch·ª©a hai n√∫t - Danh s√°ch r·∫°p v√† 5 r·∫°p g·∫ßn nh·∫•t
                      Row(
                        children: [
                          // N√∫t Danh s√°ch r·∫°p
                          Expanded(
                            child: ElevatedButton.icon(
                              icon: const Icon(Icons.movie),
                              label: const Text("Danh s√°ch r·∫°p"),
                              onPressed: showAllCinemas,
                              style: ElevatedButton.styleFrom(
                                backgroundColor: isShowingNearest
                                    ? Colors.grey[300]
                                    : Color(0xffb81d24),
                                foregroundColor: isShowingNearest
                                    ? Colors.black
                                    : Colors.white,
                                elevation: 2,
                                padding:
                                    const EdgeInsets.symmetric(vertical: 12),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(width: 10),
                          // N√∫t 5 r·∫°p g·∫ßn nh·∫•t
                          Expanded(
                            child: ElevatedButton.icon(
                              icon: const Icon(Icons.near_me),
                              label: const Text("C√°c r·∫°p g·∫ßn ƒë√¢y"),
                              onPressed: isLocationLoading
                                  ? null
                                  : _getCurrentLocation,
                              style: ElevatedButton.styleFrom(
                                backgroundColor: isShowingNearest
                                    ? Color(0xffb81d24)
                                    : Colors.grey[300],
                                foregroundColor: isShowingNearest
                                    ? Colors.white
                                    : Colors.black,
                                elevation: 2,
                                padding:
                                    const EdgeInsets.symmetric(vertical: 12),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),

                      // Dropdown ch·ªçn t·ªânh/th√†nh
                      if (!isShowingNearest) // Ch·ªâ hi·ªÉn th·ªã dropdown khi kh√¥ng ƒëang xem 5 r·∫°p g·∫ßn nh·∫•t
                        DropdownButton2<String>(
                          isExpanded: true,
                          hint: const Text(
                            "Ch·ªçn t·ªânh/th√†nh",
                            style: TextStyle(
                                fontSize: 16, fontWeight: FontWeight.w600),
                          ),
                          value: (selectedProvince?.isNotEmpty ?? false)
                              ? selectedProvince
                              : null,
                          items: provinces.map((String province) {
                            return DropdownMenuItem<String>(
                              value: province,
                              child: Padding(
                                padding: const EdgeInsets.symmetric(
                                    vertical: 10, horizontal: 12),
                                child: Text(
                                  province,
                                  style: const TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.w500),
                                ),
                              ),
                            );
                          }).toList(),
                          onChanged: (value) {
                            if (value != null) {
                              filterCinemas(value);
                            }
                          },
                          buttonStyleData: ButtonStyleData(
                            padding: const EdgeInsets.symmetric(horizontal: 16),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.grey.shade400),
                            ),
                          ),
                          dropdownStyleData: DropdownStyleData(
                            offset: const Offset(
                                0, -10), // ƒê·∫©y dropdown xu·ªëng d∆∞·ªõi m·ªôt ch√∫t
                            maxHeight: 400,
                            padding: const EdgeInsets.only(top: 8),
                            width: MediaQuery.of(context).size.width - 32,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(12),
                              color: Colors.white,
                              boxShadow: [
                                BoxShadow(
                                    color: Colors.black26,
                                    blurRadius: 6,
                                    offset: Offset(0, 4)),
                              ],
                            ),
                          ),
                          iconStyleData: IconStyleData(
                            icon: const Icon(Icons.keyboard_arrow_down,
                                size: 24, color: Colors.black54),
                          ),
                        ),
                    ],
                  ),
                ),

                // Tr·∫°ng th√°i ƒëang t·∫£i v·ªã tr√≠
                if (isLocationLoading)
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: const [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        ),
                        SizedBox(width: 10),
                        Text("ƒêang t√¨m v·ªã tr√≠ c·ªßa b·∫°n...",
                            style: TextStyle(fontStyle: FontStyle.italic)),
                      ],
                    ),
                  ),

                // Ti√™u ƒë·ªÅ c·ªßa danh s√°ch hi·ªÉn th·ªã
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  child: Row(
                    children: [
                      Icon(
                        isShowingNearest ? Icons.near_me : Icons.movie_filter,
                        color: Color(0xffEE0033),
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Text(
                        isShowingNearest
                            ? "5 r·∫°p g·∫ßn v·ªã tr√≠ c·ªßa b·∫°n"
                            : selectedProvince != null
                                ? "R·∫°p t·∫°i $selectedProvince"
                                : "T·∫•t c·∫£ r·∫°p phim",
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Color(0xffEE0033),
                        ),
                      ),
                    ],
                  ),
                ),

                // Danh s√°ch r·∫°p
                Expanded(
                  child: filteredCinemas.isEmpty
                      ? Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                Icons.movie,
                                size: 48,
                                color: Colors.grey[400],
                              ),
                              const SizedBox(height: 16),
                              Text(
                                isShowingNearest
                                    ? "Kh√¥ng t√¨m th·∫•y r·∫°p n√†o g·∫ßn b·∫°n"
                                    : "Kh√¥ng c√≥ r·∫°p n√†o trong khu v·ª±c n√†y",
                                style: TextStyle(
                                  color: Colors.grey[600],
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        )
                      : ListView.builder(
                          padding: const EdgeInsets.all(16),
                          itemCount: filteredCinemas.length + 1,
                          itemBuilder: (context, index) {
                            if (index == filteredCinemas.length) {
                              return const SizedBox(height: 50);
                            }
                            var cinema = filteredCinemas[index];
                            return CinemaCard(
                              cinema: cinema,
                              onNavigate: () {
                                _openMaps(
                                    cinema["geo_lat"], cinema["geo_long"]);
                              },
                            );
                          },
                        ),
                )
              ],
            ),
    );
  }
}

class CinemaCard extends StatelessWidget {
  final Map<String, dynamic> cinema;
  final VoidCallback onNavigate;

  const CinemaCard({super.key, required this.cinema, required this.onNavigate});

  @override
  Widget build(BuildContext context) {
    String imageBaseUrl = "https://rapchieuphim.com";
    String fullImageUrl = imageBaseUrl + (cinema["anh"] ?? "");

    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => PickMovieAndTimeScreen(cinema: cinema),
          ),
        );
      },
      child: Card(
        color: Colors.white,
        margin: const EdgeInsets.only(bottom: 16),
        elevation: 3,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
          side: BorderSide(color: Colors.grey.shade200, width: 1),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // H√¨nh ·∫£nh r·∫°p v·ªõi overlay gradient
            Stack(
              children: [
                ClipRRect(
                  borderRadius:
                      const BorderRadius.vertical(top: Radius.circular(12)),
                  child: Image.network(
                    fullImageUrl,
                    height: 160,
                    width: double.infinity,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) {
                      return Container(
                        height: 160,
                        width: double.infinity,
                        color: Colors.grey[300],
                        child: const Icon(
                          Icons.movie,
                          size: 60,
                          color: Colors.white,
                        ),
                      );
                    },
                  ),
                ),
                // Gradient overlay
                Positioned(
                  bottom: 0,
                  left: 0,
                  right: 0,
                  child: Container(
                    height: 60,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.bottomCenter,
                        end: Alignment.topCenter,
                        colors: [
                          Colors.black.withOpacity(0.7),
                          Colors.transparent,
                        ],
                      ),
                    ),
                  ),
                ),
                // T√™n r·∫°p phim tr√™n h√¨nh ·∫£nh
                Positioned(
                  bottom: 8,
                  left: 12,
                  right: 12,
                  child: Text(
                    cinema["ten_rap"] ?? "Kh√¥ng c√≥ t√™n",
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      shadows: [
                        Shadow(
                          offset: Offset(1, 1),
                          blurRadius: 3,
                          color: Color.fromARGB(150, 0, 0, 0),
                        ),
                      ],
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),

            // Th√¥ng tin r·∫°p
            Padding(
              padding: const EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // ƒê·ªãa ch·ªâ
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Icon(Icons.location_on,
                          color: Colors.redAccent, size: 20),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          cinema["dia_chi"] ?? "Kh√¥ng c√≥ ƒë·ªãa ch·ªâ",
                          style: TextStyle(
                            color: Colors.grey[800],
                            fontSize: 14,
                          ),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),

                  // S·ªë ƒëi·ªán tho·∫°i
                  Row(
                    children: [
                      Icon(Icons.phone, color: Colors.green[600], size: 20),
                      const SizedBox(width: 8),
                      Text(
                        cinema["so_dien_thoai"] ?? "Kh√¥ng c√≥ SƒêT",
                        style: TextStyle(
                          color: Colors.grey[800],
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),

                  // C√°c n√∫t t√πy ch·ªçn
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // N√∫t Xem phim
                      Expanded(
                        child: ElevatedButton.icon(
                          icon: const Icon(Icons.movie_filter, size: 16),
                          label: const Text("Xem phim"),
                          onPressed: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) =>
                                    PickMovieAndTimeScreen(cinema: cinema),
                              ),
                            );
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Color(0xffEE0033),
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 8),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(6),
                            ),
                            textStyle: const TextStyle(fontSize: 13),
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      // N√∫t Ch·ªâ ƒë∆∞·ªùng
                      Expanded(
                        child: ElevatedButton.icon(
                          icon: const Icon(LineAwesome.directions_solid,
                              size: 16),
                          label: const Text("Ch·ªâ ƒë∆∞·ªùng"),
                          onPressed: onNavigate,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green[600],
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 8),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(6),
                            ),
                            textStyle: const TextStyle(fontSize: 13),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
